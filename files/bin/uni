#!/usr/bin/perl -w
# Copyright (C) 2017  Dean Serenevy
# This work is licensed under a Creative Commons Attribution 4.0 International License.
#
use strict; use warnings; use autodie; use 5.010;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '1.0106';# Created: 2011-12-24

our %OPT = (  );
our @OPT_SPEC = qw/ help|h version path=s@ e class /;
sub USAGE { <<"USAGE" };
usage: $_[0] [options] PATTERN
       $_[0] --class NAME

Search through unicode symbols for pattern. Eg:

\$ uni heart
0x2619  ☙  \\p{So}  REVERSED ROTATED FLORAL HEART BULLET
0x2661  ♡  \\p{So}  WHITE HEART SUIT
0x2665  ♥  \\p{So}  BLACK HEART SUIT
0x2763  ❣  \\p{So}  HEAVY HEART EXCLAMATION MARK ORNAMENT
...

\$ uni --class Po
0x0021  !  \\p{Po}  EXCLAMATION MARK
0x0022  "  \\p{Po}  QUOTATION MARK
0x0023  #  \\p{Po}  NUMBER SIGN
0x0025  %  \\p{Po}  PERCENT SIGN
...


OPTIONS

 -e                  treat pattern as a regular expression
 --path <dir>        path to examine for UnicodeData.txt
USAGE

use Encode;
use Unicode::UCD qw/ charinfo /;
use Encode;
use open ':encoding(UTF-8)', ':std';
@ARGV = map decode("UTF-8", $_), @ARGV;

get_options( \%OPT, @OPT_SPEC );

my $DATA;
for (@{$OPT{path} || []}, "/usr/share/unicode", @INC) {
    next if ref;
    if (-f "$_/UnicodeData.txt") {
        open $DATA, "<", "$_/UnicodeData.txt";
        last;
    }
    elsif (-f "$_/unicore/UnicodeData.txt") {
        open $DATA, "<", "$_/unicore/UnicodeData.txt";
        last;
    }
}
die "Unable to locate unicore/UnicodeData.txt (do you need to install the unicode-data package?)" unless $DATA;

my $pat = join " ", @ARGV;

if (length $pat == 1) {
    show_char(ord $pat);
    exit;
}


if ($OPT{e})     { $pat = qr/$pat/i }
if ($OPT{class}) { $pat = qr/;\Q$pat\E;/ }
else             { $pat = qr/\Q$pat\E/i }

while (my $line = <$DATA>) {
    next unless $line =~ $pat;
    my @F = split /;/, $line;
    show_char("0x$F[0]");
}


sub show_char {
    my $info = charinfo(shift);
    return unless $$info{code};
    $$info{chr} = chr(hex($$info{code}));
    $$info{name} //= "Private Use";
    $$info{unicode10} = $$info{unicode10} ? "  Unicode 1.0 name: $$info{unicode10}" : "";
    say "0x$$info{code}  $$info{chr}  \\p{$$info{category}}  $$info{name}$$info{unicode10}";
}

sub get_options {
  my $OPT = shift;
  GetOptions $OPT, @_ or ($$OPT{help} = 1);
  usage() if $$OPT{help} || $$OPT{version};
  lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
  print @_, "\n" if @_;
  require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
  $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
  print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
  exit;
}
