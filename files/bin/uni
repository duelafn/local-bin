#!/usr/bin/perl -w
use strict; use warnings; use autodie; use 5.010;

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '1.0013';# Created: 2011-12-24

our %OPT = (  );
our @OPT_SPEC = qw/ help|h version noact|no-act|dry-run path=s@ e DEBUG /;
sub USAGE { <<"USAGE" };
usage: $_[0] [options] PATTERN

Search through unicode symbols for pattern. Eg:

\$ uni heart
0x2619 ☙ REVERSED ROTATED FLORAL HEART BULLET
0x2661 ♡ WHITE HEART SUIT
0x2665 ♥ BLACK HEART SUIT
0x2763 ❣ HEAVY HEART EXCLAMATION MARK ORNAMENT
...
USAGE

use Encode;

get_options( \%OPT, @OPT_SPEC );
binmode STDOUT, ':encoding(UTF-8)';

my $DATA;
for (@{$OPT{path} || []}, "/usr/share/unicode", @INC) {
    next if ref;
    if (-f "$_/UnicodeData.txt") {
        open $DATA, "<", "$_/UnicodeData.txt";
        last;
    }
    elsif (-f "$_/unicore/UnicodeData.txt") {
        open $DATA, "<", "$_/unicore/UnicodeData.txt";
        last;
    }
}
die "Unable to locate unicore/UnicodeData.txt (do you need to install the unicode-data package?)" unless $DATA;

my $pat = decode("UTF-8", join " ", @ARGV);

if (length $pat == 1 and ord($pat) >= 128) {
    require charnames;
    printf "0x%04X %s %s$/", ord $pat, $pat, charnames::viacode(ord $pat) || "Private Use";
    exit;
}


if ($OPT{e}) { $pat = qr/$pat/i }
else         { $pat = qr/\Q$pat\E/i }

while (my $line = <$DATA>) {
    next unless $line =~ $pat;
    my @F = split /;/, $line;
    say join " ", "0x$F[0]", chr(hex $F[0]), $F[1];
}



sub get_options {
  my $OPT = shift;
  GetOptions $OPT, @_ or ($$OPT{help} = 1);
  usage() if $$OPT{help} || $$OPT{version};
  lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
  print @_, "\n" if @_;
  require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
  $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
  print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
  exit;
}
