#!/usr/bin/perl -w
# Copyright (C) 2017  Dean Serenevy
# This work is licensed under a Creative Commons Attribution 4.0 International License.
#

use strict; use warnings; use 5.014;

use Getopt::Long qw/:config bundling require_order/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '0.5.2';# Created: 2016-05-08

our %OPT = (  );
our @OPT_SPEC =
qw/ help|h version noact|no-act|dry-run DEBUG
    interactive|i!  tty|t!
    jobs|j=i
    image=s
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options] -- 'SHELL COMMAND'
       $_[0] [options] -- COMMAND ARG(S)

Execute a command (`docker exec`) in all running docker containers. Command
components may include "%" substitutions:

  %%  - '%' character
  %n  - name
  %i  - image
  %c  - container id

NOTE: Be careful with the 'SHELL COMMAND' syntax. The shell expansion
happens on the host, not in the container (see examples).


OPTIONS

 --interactive, -i   pass -i option to docker exec
 --tty, -t           pass -t option to docker exec

 --image <NAME>      execute only for containers running the named image

 --jobs, -j <N>      execute N jobs in parallel

 --no-act,
 --dry-run           don't run commands, just list what would be done

 --DEBUG             print additional information while running
 --help, -h          this usage message
 --version           show script version


EXAMPLES

Install a (debian) package in all containers:

  docker-do -j4  apt-get install less

Backup all your postgres databases (since shell expansion happens on host,
you end up with multiple .sql files in the current directory on the host):

  docker-do -j4 --image duelafn/postgresql  "sudo -u postgres pg_dumpall > %n.sql"
__USAGE__

use Parallel::ForkManager;

get_options( \%OPT, @OPT_SPEC );
MAIN(\%OPT, @ARGV);


sub MAIN {
    my ($opt, @cmd) = @_;
    usage() unless @cmd;
    my $pm = Parallel::ForkManager->new($OPT{jobs} || 0);

    my $image = $OPT{image};
    $image .= ":" if $image and $image !~ /:/;
    for my $c (docker_ps()) {
        next if $image and $$c{image} !~ /^\Q$image\E/;
        $pm->start and next;
        docker_exec($c, @cmd);
        $pm->finish;
    }
    $pm->wait_all_children;
}

sub image { $_[0]->{image}; }
sub id    { die unless $_[0]->{id} =~ /\A[0-9a-f]+\z/; return $_[0]->{id}; }
sub name {
    my $c = shift;
    return $$c{name} if $$c{name};
    my $id = id($c);
    chomp($$c{name} = `docker inspect -f '{{.Name}}' $id`);
    $$c{name} =~ s|^/||;
    return $$c{name};
}

sub subst {
    my $cb = {
        '%' => sub { '%' },
        i   => \&image,
        c   => \&id,
        n   => \&name,
    };
    my ($c, $attr) = @_;
    die "No such replacement: '$attr'" unless exists($$cb{$attr});
    return $$cb{$attr}->($c);
}

sub docker_exec {
    my ($c, @cmd) = @_;
    my @args;
    push @args, "-i" if $OPT{interactive};
    push @args, "-t" if $OPT{tty};
    s/%(.)/subst($c, $1)/ge for @cmd;
    if ($OPT{noact} || $OPT{DEBUG}) {
        say join " ", docker => exec => @args, $$c{id}, @cmd;
        return if $OPT{noact};
    }
    if (1 == @cmd) {
        my $id = id($c);
        system "docker exec @args $id @cmd";
    } else {
        system docker => exec => @args, $$c{id}, @cmd;
    }
}

sub docker_ps {
    my ($HEAD, @running) = `docker ps`;
    my @c;
    for (@running) {
        my ($id, $image) = split;
        push @c, { id => $id, image => $image };
    }
    return @c;
}

sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version};
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
