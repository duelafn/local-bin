#!/usr/bin/perl -w
# Copyright (C) 2017  Dean Serenevy
# This work is licensed under a Creative Commons Attribution 4.0 International License.
#
use strict; use warnings;
use 5.028; use experimental 'signatures';

use Getopt::Long qw/:config bundling/;
use Hash::Util qw/ lock_keys /;
our $VERSION = '9.0201';# Created: 2013-01-17

our %OPT = ( number => 1 );
our @OPT_SPEC =
qw/
      help|h version noact|no-act|dry-run DEBUG
      nonempty! noncomment! number|n=i
      pattern|expression|e=s
  /;
sub USAGE { <<"__USAGE__" };
usage: $_[0] [options] <NUMBER>
       $_[0] [options] <OPTIONS>
       $_[0] [options] <FILE>
       $_[0] [options] ACTION ARG(S)

ACTIONS

  $_[0] number <N>
  $_[0] number <N>..<M>
  $_[0] number <N>:<M>
  $_[0] number <N>:<step>:<M>
    number

  $_[0] item <OPTIONS>
    item from the list of options (without replacement when n > 1)

  $_[0] line <FILE(S)>
  $_[0] --nonempty --noncomment -e PATTERN line <FILE(S)>
    line from the given file (pass "-" to read from STDIN)

  $_[0] crontime
    time when you might want to schedule cronjobs

  $_[0] port | port4
    unpriviliged port number not present in /etc/services

  $_[0] mac
    random MAC address for spoofing

  $_[0] ipv6
    IPv6 ID (64-bit)

  $_[0] u8 | u16 | u32 | u64 | i8 | i16 | i32 | i64

  $_[0] hello
    Random hello fresh recipe

OPTIONS

 -n NUM              generate NUM random items
__USAGE__

use Path::Class;
use Dean::Util qw/ simple_range2list /;

sub urandom { # read N bytes from urandom
    state $FH;
    unless ($FH) { open $FH, "<:raw", "/dev/urandom" or die "Error reading /dev/urandom"; }
    sysread $FH, my $buf, $_[0], 0;
    return $buf;
}

our %ACTIONS; sub action;
action help => sub { usage() };

action u8  => sub { for (1..$OPT{number}) { say unpack "C", urandom(1) } };
action u16 => sub { for (1..$OPT{number}) { say unpack "S", urandom(2) } };
action u32 => sub { for (1..$OPT{number}) { say unpack "L", urandom(4) } };
action u64 => sub { for (1..$OPT{number}) { say unpack "Q", urandom(8) } };

action i8  => sub { for (1..$OPT{number}) { say unpack "c", urandom(1) } };
action i16 => sub { for (1..$OPT{number}) { say unpack "s", urandom(2) } };
action i32 => sub { for (1..$OPT{number}) { say unpack "l", urandom(4) } };
action i64 => sub { for (1..$OPT{number}) { say unpack "q", urandom(8) } };

action [qw/hello fresh/] => sub { say "row ", 1+int(rand(20)), ", col ", 1+int(rand(3)) };

action [qw/ cron crontime /] => sub($action, @args) {
    my @hour = (23,0..5);
    my @min  = (0..59);
    for (1..$OPT{number}) {
        my $hour = $hour[rand @hour];
        my $min  = $min[rand @min];
        say "$min $hour * * *";
    }
};

action item => sub($action, @args) {
    while ($OPT{number} > 0 and @args) {
        say splice @args, (0+rand @args), 1;
        $OPT{number} -= 1;
    }
};

action ['ipv6', 'mac', 'MAC'] => sub($action, @args) {
    for (1..$OPT{number}) {
        if ($$action{-name} =~ /v6/i) {
            say join(":", map sprintf("%02x%02x", int(rand(256)), int(rand(256))), 1..4);
        } else {
            say join(":", map sprintf("%02x", int(rand(256))), 1..6);
        }
    }
};

action line => sub($action, @args) {
    my @lines;
    my $i = 1;
    for my $file (@args) {
        my $F;
        if ($file eq '-') {
            $F = \*STDIN;
        } else {
            open $F, "<", $file or die "Could not read $file: $!";
        }
        while (defined(my $l = <$F>)) {
            next if $OPT{nonempty}   and $l !~ /\S/;
            next if $OPT{noncomment} and $l =~ /^\s*(?:#|\/\/)/;
            next if $OPT{pattern}    and $l !~ /$OPT{pattern}/;
            for my $n (0..($OPT{number}-1)) {
                $lines[$n] = $l if rand($i) < 1;
            }
            $i++;
        }
    }
    say s/(?:\015?\012|\015)+//r for @lines;
};

action number => sub($action, @args) {
    if (1 == @args and $args[0] =~ /^9+$/) {
        # Special case: 9999, ensure same length
        say rand_9s($args[0]) for 1..$OPT{number};
    }
    elsif (1 == @args and $args[0] =~ /^\d+$/) {
        say int(rand($args[0])) for 1..$OPT{number};
    }
    else {
        my @items = simple_range2list(@args);
        say $items[rand @items] for 1..$OPT{number};
    }
};

action ["port", "port4"] => sub($action, @args) {
    my %bad = map { /^\w\S+\s+(\d+)/ ? ( $1 => 1 ) : () } file("/etc/services")->slurp;
    for (1..$OPT{number}) {
        my $port = 0;
        while ($port < 1024 or $bad{$port}) {
            $port = int rand( ($$action{-name} =~ /4/) ? 9999 : 65536 );
        }
        say $port;
    }
};


get_options( \%OPT, @OPT_SPEC );

my $action;
# An existing action name trumps everything
if (exists $ACTIONS{$ARGV[0]}) {
    $action = shift @ARGV;
}
# Failing that, multiple items always triggers an item randomization
elsif (@ARGV > 1) {
    $action = "item";
}
# If it is a file name, choose a random line
elsif ($ARGV[0] eq '-' or -f $ARGV[0]) {
    $action = "line";
}
# If it looks like a range specification
elsif (
    $ARGV[0] =~ /^(?:
        [a-z]{1,3}
      | [\d.]+
      | [\d.]+(?:\-|\.\.)[\d.]+
      | [a-z]{1,3}(?:\-|\.\.)[a-z]{1,3}
      | [\d.]+(?::[\d.]+){1,2}
      )$/xi
   ) {
    $action = "number";
}

call_action( $action => @ARGV );


sub rand_9s {
    my $max = shift;
    my $n;
    do {
        $n = int(rand($max+1));
    } while (length($n) != length($max));
    return $n;
}

sub action {
    my $name = shift;
    $name = [ $name ] unless ref($name);
    unshift @_, "-action" if 1 == @_;
    $ACTIONS{$_} = { -name => $_, @_ } for @$name;
}

sub call_action {
    my $name = shift || "";
    usage("No such action $name") unless exists $ACTIONS{$name};
    my $action = $ACTIONS{$name};

    my @arg = @_;
    @arg = $$action{-build_args}->( $action, @_ ) if $$action{-build_args};

    $$action{-action}->( $action, @arg );
}

sub get_options {
    my $OPT = shift;
    GetOptions $OPT, @_ or usage(1);
    usage() if $$OPT{help} || $$OPT{version} || !@ARGV;
    lock_keys(%$OPT, keys %$OPT, map /^(\w+)/, @_);
}

sub usage {
    my $status = (@_ && $_[0] =~ /^\d+$/) ? shift(@_) : 0+@_;
    print @_, "\n" if @_;
    require File::Spec; my $exe = (File::Spec->splitpath($0))[2];
    $OPT{$_} = $OPT{$_} ? "enabled" : "disabled" for map /^(\w+).*!/, @OPT_SPEC;
    print $OPT{version} ? "$exe version $VERSION\n" : USAGE($exe);
    exit $status;
}
